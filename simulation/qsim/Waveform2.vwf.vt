// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/01/2022 21:04:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          digital_clock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module digital_clock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Add_1H_Switch;
reg Add_1M_Switch;
reg CLK;
reg Mode;
reg [9:0] MyCode;
reg S;
reg [9:0] YourCode;
// wires                                               
wire H0;
wire H1;
wire H2;
wire H3;
wire H4;
wire [6:0] My_H0;
wire [6:0] My_H1;
wire [6:0] My_M0;
wire [6:0] My_M1;
wire [6:0] My_S0;
wire [6:0] My_S1;
wire [6:0] Your_H0;
wire [6:0] Your_H1;
wire [6:0] Your_M0;
wire [6:0] Your_M1;
wire [6:0] Your_S0;
wire [6:0] Your_S1;

// assign statements (if any)                          
digital_clock i1 (
// port map - connection between master ports and signals/registers   
	.Add_1H_Switch(Add_1H_Switch),
	.Add_1M_Switch(Add_1M_Switch),
	.CLK(CLK),
	.H0(H0),
	.H1(H1),
	.H2(H2),
	.H3(H3),
	.H4(H4),
	.Mode(Mode),
	.My_H0(My_H0),
	.My_H1(My_H1),
	.My_M0(My_M0),
	.My_M1(My_M1),
	.My_S0(My_S0),
	.My_S1(My_S1),
	.MyCode(MyCode),
	.S(S),
	.Your_H0(Your_H0),
	.Your_H1(Your_H1),
	.Your_M0(Your_M0),
	.Your_M1(Your_M1),
	.Your_S0(Your_S0),
	.Your_S1(Your_S1),
	.YourCode(YourCode)
);
initial 
begin 
#100000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// Mode
initial
begin
	Mode = 1'b1;
	Mode = #80000 1'b0;
	Mode = #1040000 1'b1;
end 

// Add_1M_Switch
initial
begin
	Add_1M_Switch = 1'b0;
	Add_1M_Switch = #80000 1'b1;
	Add_1M_Switch = #80000 1'b0;
	Add_1M_Switch = #80000 1'b1;
	Add_1M_Switch = #80000 1'b0;
end 

// Add_1H_Switch
initial
begin
	Add_1H_Switch = 1'b0;
	Add_1H_Switch = #80000 1'b1;
	Add_1H_Switch = #80000 1'b0;
	Add_1H_Switch = #80000 1'b1;
	Add_1H_Switch = #80000 1'b0;
	Add_1H_Switch = #80000 1'b1;
	Add_1H_Switch = #80000 1'b0;
	Add_1H_Switch = #80000 1'b1;
	Add_1H_Switch = #80000 1'b0;
end 
// MyCode[ 9 ]
initial
begin
	MyCode[9] = 1'b0;
end 
// MyCode[ 8 ]
initial
begin
	MyCode[8] = 1'b0;
end 
// MyCode[ 7 ]
initial
begin
	MyCode[7] = 1'b0;
end 
// MyCode[ 6 ]
initial
begin
	MyCode[6] = 1'b1;
	MyCode[6] = #70000 1'b0;
end 
// MyCode[ 5 ]
initial
begin
	MyCode[5] = 1'b0;
end 
// MyCode[ 4 ]
initial
begin
	MyCode[4] = 1'b1;
	MyCode[4] = #70000 1'b0;
end 
// MyCode[ 3 ]
initial
begin
	MyCode[3] = 1'b0;
end 
// MyCode[ 2 ]
initial
begin
	MyCode[2] = 1'b0;
end 
// MyCode[ 1 ]
initial
begin
	MyCode[1] = 1'b1;
	MyCode[1] = #70000 1'b0;
end 
// MyCode[ 0 ]
initial
begin
	MyCode[0] = 1'b0;
end 
// YourCode[ 9 ]
initial
begin
	YourCode[9] = 1'b0;
end 
// YourCode[ 8 ]
initial
begin
	YourCode[8] = 1'b0;
end 
// YourCode[ 7 ]
initial
begin
	YourCode[7] = 1'b0;
end 
// YourCode[ 6 ]
initial
begin
	YourCode[6] = 1'b0;
end 
// YourCode[ 5 ]
initial
begin
	YourCode[5] = 1'b0;
end 
// YourCode[ 4 ]
initial
begin
	YourCode[4] = 1'b0;
end 
// YourCode[ 3 ]
initial
begin
	YourCode[3] = 1'b0;
end 
// YourCode[ 2 ]
initial
begin
	YourCode[2] = 1'b0;
end 
// YourCode[ 1 ]
initial
begin
	YourCode[1] = 1'b0;
end 
// YourCode[ 0 ]
initial
begin
	YourCode[0] = 1'b1;
	YourCode[0] = #70000 1'b0;
end 

// S
initial
begin
	S = 1'b1;
	S = #60000 1'b0;
end 
endmodule


// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/01/2022 23:47:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          digital_clock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module digital_clock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Add_1H_Switch;
reg Add_1M_Switch;
reg CLK;
reg Mode;
reg MyDial_0;
reg MyDial_1;
reg MyDial_2;
reg MyDial_3;
reg MyDial_4;
reg MyDial_5;
reg MyDial_6;
reg MyDial_7;
reg MyDial_8;
reg MyDial_9;
reg Send;
reg U_Dial_0;
reg U_Dial_1;
reg U_Dial_2;
reg U_Dial_3;
reg U_Dial_4;
reg U_Dial_5;
reg U_Dial_6;
reg U_Dial_7;
reg U_Dial_8;
reg U_Dial_9;
reg Zero;
// wires                                               
wire H0;
wire H1;
wire H2;
wire H3;
wire H4;
wire [6:0] My_H0;
wire [6:0] My_H1;
wire [6:0] My_M0;
wire [6:0] My_M1;
wire [6:0] My_S0;
wire [6:0] My_S1;
wire [6:0] Your_H0;
wire [6:0] Your_H1;
wire [6:0] Your_M0;
wire [6:0] Your_M1;
wire [6:0] Your_S0;
wire [6:0] Your_S1;

// assign statements (if any)                          
digital_clock i1 (
// port map - connection between master ports and signals/registers   
	.Add_1H_Switch(Add_1H_Switch),
	.Add_1M_Switch(Add_1M_Switch),
	.CLK(CLK),
	.H0(H0),
	.H1(H1),
	.H2(H2),
	.H3(H3),
	.H4(H4),
	.Mode(Mode),
	.My_H0(My_H0),
	.My_H1(My_H1),
	.My_M0(My_M0),
	.My_M1(My_M1),
	.My_S0(My_S0),
	.My_S1(My_S1),
	.MyDial_0(MyDial_0),
	.MyDial_1(MyDial_1),
	.MyDial_2(MyDial_2),
	.MyDial_3(MyDial_3),
	.MyDial_4(MyDial_4),
	.MyDial_5(MyDial_5),
	.MyDial_6(MyDial_6),
	.MyDial_7(MyDial_7),
	.MyDial_8(MyDial_8),
	.MyDial_9(MyDial_9),
	.Send(Send),
	.U_Dial_0(U_Dial_0),
	.U_Dial_1(U_Dial_1),
	.U_Dial_2(U_Dial_2),
	.U_Dial_3(U_Dial_3),
	.U_Dial_4(U_Dial_4),
	.U_Dial_5(U_Dial_5),
	.U_Dial_6(U_Dial_6),
	.U_Dial_7(U_Dial_7),
	.U_Dial_8(U_Dial_8),
	.U_Dial_9(U_Dial_9),
	.Your_H0(Your_H0),
	.Your_H1(Your_H1),
	.Your_M0(Your_M0),
	.Your_M1(Your_M1),
	.Your_S0(Your_S0),
	.Your_S1(Your_S1),
	.Zero(Zero)
);
initial 
begin 
#100000000 $finish;
end 

// Zero
initial
begin
	Zero = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// Mode
initial
begin
	Mode = 1'b0;
	Mode = #1600000 1'b1;
end 

// Add_1H_Switch
initial
begin
	Add_1H_Switch = 1'b0;
	Add_1H_Switch = #40000 1'b1;
	Add_1H_Switch = #40000 1'b0;
	Add_1H_Switch = #120000 1'b1;
	Add_1H_Switch = #40000 1'b0;
	Add_1H_Switch = #80000 1'b1;
	Add_1H_Switch = #40000 1'b0;
	Add_1H_Switch = #40000 1'b1;
	Add_1H_Switch = #80000 1'b0;
	Add_1H_Switch = #80000 1'b1;
	Add_1H_Switch = #40000 1'b0;
	Add_1H_Switch = #80000 1'b1;
	Add_1H_Switch = #40000 1'b0;
	Add_1H_Switch = #80000 1'b1;
	Add_1H_Switch = #40000 1'b0;
	Add_1H_Switch = #160000 1'b1;
	Add_1H_Switch = #40000 1'b0;
end 

// Add_1M_Switch
initial
begin
	Add_1M_Switch = 1'b0;
	Add_1M_Switch = #40000 1'b1;
	Add_1M_Switch = #40000 1'b0;
	Add_1M_Switch = #40000 1'b1;
	Add_1M_Switch = #40000 1'b0;
	Add_1M_Switch = #40000 1'b1;
	Add_1M_Switch = #40000 1'b0;
	Add_1M_Switch = #80000 1'b1;
	Add_1M_Switch = #40000 1'b0;
end 

// MyDial_0
initial
begin
	MyDial_0 = 1'b0;
end 

// MyDial_1
initial
begin
	MyDial_1 = 1'b0;
end 

// MyDial_2
initial
begin
	MyDial_2 = 1'b0;
	MyDial_2 = #240000 1'b1;
	MyDial_2 = #40000 1'b0;
end 

// MyDial_3
initial
begin
	MyDial_3 = 1'b0;
end 

// MyDial_4
initial
begin
	MyDial_4 = 1'b0;
end 

// MyDial_5
initial
begin
	MyDial_5 = 1'b0;
end 

// MyDial_6
initial
begin
	MyDial_6 = 1'b0;
end 

// MyDial_7
initial
begin
	MyDial_7 = 1'b0;
end 

// MyDial_8
initial
begin
	MyDial_8 = 1'b0;
	MyDial_8 = #120000 1'b1;
	MyDial_8 = #40000 1'b0;
end 

// MyDial_9
initial
begin
	MyDial_9 = 1'b0;
end 

// U_Dial_0
initial
begin
	U_Dial_0 = 1'b0;
end 

// U_Dial_1
initial
begin
	U_Dial_1 = 1'b0;
end 

// U_Dial_2
initial
begin
	U_Dial_2 = 1'b0;
end 

// U_Dial_3
initial
begin
	U_Dial_3 = 1'b0;
end 

// U_Dial_4
initial
begin
	U_Dial_4 = 1'b0;
end 

// U_Dial_5
initial
begin
	U_Dial_5 = 1'b0;
end 

// U_Dial_6
initial
begin
	U_Dial_6 = 1'b0;
	U_Dial_6 = #360000 1'b1;
	U_Dial_6 = #40000 1'b0;
end 

// U_Dial_7
initial
begin
	U_Dial_7 = 1'b0;
end 

// U_Dial_8
initial
begin
	U_Dial_8 = 1'b0;
	U_Dial_8 = #200000 1'b1;
	U_Dial_8 = #40000 1'b0;
end 

// U_Dial_9
initial
begin
	U_Dial_9 = 1'b0;
end 

// Send
initial
begin
	Send = 1'b0;
	Send = #520000 1'b1;
	Send = #40000 1'b0;
end 
endmodule

